/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
// #include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define RAISE   1

#define INPUT_EV_KEY 0x01               /**< Key event */
#define INPUT_EV_REL 0x02               /**< Relative coordinate event */
#define INPUT_EV_ABS 0x03               /**< Absolute coordinate event */
#define INPUT_EV_MSC 0x04               /**< Miscellaneous event */
#define INPUT_EV_VENDOR_START 0xf0      /**< Vendor specific event start */
#define INPUT_EV_VENDOR_STOP 0xff       /**< Vendor specific event stop */

#define INPUT_REL_X 0x00                /**< Relative X coordinate */
#define INPUT_REL_Y 0x01                /**< Relative Y coordinate */
#define INPUT_REL_WHEEL 0x08            /**< Relative wheel coordinate */
#define INPUT_REL_HWHEEL 0x06           /**< Relative horizontal wheel coordinate */
#define INPUT_REL_MISC 0x09             /**< Relative misc coordinate */

/ {

        // tb0_mmv_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd0>;
        //         layers = <DEFAULT>;
	// 	evt-type = <INPUT_EV_REL>;
	// 	x-input-code = <INPUT_REL_X>;
	// 	y-input-code = <INPUT_REL_Y>;
	// 	scale-multiplier = <1>;
	// 	scale-divisor = <1>;
        //         // bindings = <&ib_tog_layer RAISE>;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };

        // tb0_msl_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd0>;
        //         layers = <RAISE>;
        //         evt-type = <INPUT_EV_REL>;
        //         x-input-code = <INPUT_REL_MISC>;
        //         y-input-code = <INPUT_REL_WHEEL>;
        //         scale-multiplier = <1>;
        //         scale-divisor = <8>;
        //         y-invert;
        // };
        
	// anin0_ibl {
	// 	compatible = "zmk,input-behavior-listener";
	// 	device = <&anin0>;
	// 	layers = <DEFAULT>;
        //         bindings = <&ib_fwd_to_hid_io>;
	// };

        // ib_tog_layer: ib_tog_layer {
        //         compatible = "zmk,input-behavior-tog-layer";
        //         #binding-cells = <1>;
        //         time-to-live-ms = <1000>;
        // };

        // ib_fwd_to_hid_io: ib_forward_fwd_to_hid_io {
        //         compatible = "zmk,input-behavior-fwd-to-hid-io";
        //         #binding-cells = <0>;
        // };

        // hidiokp: hid_io_key_press {
        //     compatible = "zmk,behavior-hid-io-key-press";
        //     #binding-cells = <1>;
        // };
	// hidiokp_ibl {
	// 	compatible = "zmk,input-behavior-listener";
	// 	device = <&hidiokp>;
	// 	layers = <DEFAULT>;
        //         bindings = <&ib_fwd_to_hid_io>;
	// };

        ins883x: behavior_drv883x_0 {
                compatible = "zmk,behavior-drv883x";
                #binding-cells = <2>;
                drv883x-dev = <&drv883x_0>;
                vel-neutral = <128>;
                vel-min-max = <128>;
        };

        keymap {
                compatible = "zmk,keymap";
                default_layer {
                        bindings = <
                                &ins883x 0 160 // channel 0, speed +32 (forward)
                                &ins883x 0 128 // channel 0, speed 0   (neutral)
                                &ins883x 0 96  // channel 0, speed -32 (reverse)
                        >;
                };
                // raise_layer {
                //         bindings = <
                //                 &hidiokp 0      &hidiokp 1       &hidiokp 2
                //         >;
                // };
       };
};
